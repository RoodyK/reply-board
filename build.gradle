plugins {
	id 'java'
	// jpa batch_fetch_size in 쿼리 매핑되는 부분 제외 모두 null 값이 매핑됨, 확인 필요
	id 'org.springframework.boot' version '3.2.8'
	id 'io.spring.dependency-management' version '1.1.6'
	id "org.asciidoctor.jvm.convert" version "3.3.2" // Asciidoctor 플러그인 적용

	//	정상
//	id 'org.springframework.boot' version '3.0.5'
//	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	asciidoctorExt // Asciidoctor 빌드 프로세스에 추가적인 플러그인이나 라이브러리를 포함해준다.
}

repositories {
	mavenCentral()
}

// 스크립트에서 재사용을 위한 변수(프로퍼티) 정의
ext {
	asciidocVersion = "3.0.1"
	snippetsDir = file('build/generated-snippets') // 스니펫 파일들이 저장되는 디렉토리 지정
}

dependencies {
	// spring
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	// p6spy
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

	// querydsl
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// rest docs
	asciidoctorExt "org.springframework.restdocs:spring-restdocs-asciidoctor:${asciidocVersion}"
	testImplementation "org.springframework.restdocs:spring-restdocs-mockmvc:${asciidocVersion}"

	// db
	runtimeOnly 'com.mysql:mysql-connector-j'
	testRuntimeOnly 'com.h2database:h2'
//	runtimeOnly 'com.h2database:h2'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// test lombok
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

clean {
	delete file('src/main/generated')
}

jar {
	enabled = false
}

test {
	// 테스트 작업이 실행될 때 snippetsDir에 출력 파일들이 생성되도록 설정
	outputs.dir snippetsDir
}

// Asciidoctor 작업 설정
asciidoctor {
	// adoc 문서 파일의 기본 위치를 설정
	sourceDir = file('src/docs/asciidoc')
	// 생성된 HTML 파일의 출력을 설정
	outputDir = file('src/main/resources/static/docs')

	// gradle이 Asciidoctor 작업을 실행할 때 snippetsDir을 읽어 문서 스니펫을 생성하도록 설정
	inputs.dir snippetsDir
	// Asciidoctor 작업에서 사용할 configuration(외부 구성)을 asciidoctorExt로 설정. 추가 의존설을 지정할 때 사용
	configurations 'asciidoctorExt'
	// Asciidoctor의 작업이 test에 의존하도록 설정. Asciidoctor 작업이 실행되기 전에 test가 먼저 실행된다.
	dependsOn test
}

bootJar {
	// JAR 파일을 빌드할 때, 문서를 포함하도록 설정합니다.
	dependsOn asciidoctor
	// jar 파일에 포함할 파일 및 디렉토리를 지정
	// asciidoctor 출력 디렉토리가 jar 파일 내에 어느 위치에 포함될지 지정
	from("${asciidoctor.outputDir}") {
		into 'src/main/resources/static/docs' //
	}
}